package bernie.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_WEB_PAGE".
*/
public class HistoryWebPageDao extends AbstractDao<HistoryWebPage, Long> {

    public static final String TABLENAME = "HISTORY_WEB_PAGE";

    /**
     * Properties of entity HistoryWebPage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WebPageSite = new Property(1, String.class, "webPageSite", false, "WEB_PAGE_SITE");
        public final static Property WebTitle = new Property(2, String.class, "webTitle", false, "WEB_TITLE");
        public final static Property ScanTime = new Property(3, String.class, "scanTime", false, "SCAN_TIME");
    }


    public HistoryWebPageDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryWebPageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_WEB_PAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"WEB_PAGE_SITE\" TEXT," + // 1: webPageSite
                "\"WEB_TITLE\" TEXT," + // 2: webTitle
                "\"SCAN_TIME\" TEXT);"); // 3: scanTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_WEB_PAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryWebPage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String webPageSite = entity.getWebPageSite();
        if (webPageSite != null) {
            stmt.bindString(2, webPageSite);
        }
 
        String webTitle = entity.getWebTitle();
        if (webTitle != null) {
            stmt.bindString(3, webTitle);
        }
 
        String scanTime = entity.getScanTime();
        if (scanTime != null) {
            stmt.bindString(4, scanTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryWebPage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String webPageSite = entity.getWebPageSite();
        if (webPageSite != null) {
            stmt.bindString(2, webPageSite);
        }
 
        String webTitle = entity.getWebTitle();
        if (webTitle != null) {
            stmt.bindString(3, webTitle);
        }
 
        String scanTime = entity.getScanTime();
        if (scanTime != null) {
            stmt.bindString(4, scanTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HistoryWebPage readEntity(Cursor cursor, int offset) {
        HistoryWebPage entity = new HistoryWebPage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // webPageSite
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // webTitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // scanTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryWebPage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWebPageSite(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWebTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setScanTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HistoryWebPage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HistoryWebPage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryWebPage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
