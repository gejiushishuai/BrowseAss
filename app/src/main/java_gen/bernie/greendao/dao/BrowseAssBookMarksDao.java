package bernie.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BROWSE_ASS_BOOK_MARKS".
*/
public class BrowseAssBookMarksDao extends AbstractDao<BrowseAssBookMarks, Void> {

    public static final String TABLENAME = "BROWSE_ASS_BOOK_MARKS";

    /**
     * Properties of entity BrowseAssBookMarks.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property WebSite = new Property(0, String.class, "webSite", false, "WEB_SITE");
        public final static Property WebSiteIcon = new Property(1, String.class, "webSiteIcon", false, "WEB_SITE_ICON");
        public final static Property SaveDate = new Property(2, String.class, "saveDate", false, "SAVE_DATE");
    }


    public BrowseAssBookMarksDao(DaoConfig config) {
        super(config);
    }
    
    public BrowseAssBookMarksDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BROWSE_ASS_BOOK_MARKS\" (" + //
                "\"WEB_SITE\" TEXT," + // 0: webSite
                "\"WEB_SITE_ICON\" TEXT," + // 1: webSiteIcon
                "\"SAVE_DATE\" TEXT);"); // 2: saveDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BROWSE_ASS_BOOK_MARKS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BrowseAssBookMarks entity) {
        stmt.clearBindings();
 
        String webSite = entity.getWebSite();
        if (webSite != null) {
            stmt.bindString(1, webSite);
        }
 
        String webSiteIcon = entity.getWebSiteIcon();
        if (webSiteIcon != null) {
            stmt.bindString(2, webSiteIcon);
        }
 
        String saveDate = entity.getSaveDate();
        if (saveDate != null) {
            stmt.bindString(3, saveDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BrowseAssBookMarks entity) {
        stmt.clearBindings();
 
        String webSite = entity.getWebSite();
        if (webSite != null) {
            stmt.bindString(1, webSite);
        }
 
        String webSiteIcon = entity.getWebSiteIcon();
        if (webSiteIcon != null) {
            stmt.bindString(2, webSiteIcon);
        }
 
        String saveDate = entity.getSaveDate();
        if (saveDate != null) {
            stmt.bindString(3, saveDate);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BrowseAssBookMarks readEntity(Cursor cursor, int offset) {
        BrowseAssBookMarks entity = new BrowseAssBookMarks( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // webSite
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // webSiteIcon
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // saveDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BrowseAssBookMarks entity, int offset) {
        entity.setWebSite(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setWebSiteIcon(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSaveDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BrowseAssBookMarks entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BrowseAssBookMarks entity) {
        return null;
    }

    @Override
    public boolean hasKey(BrowseAssBookMarks entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
